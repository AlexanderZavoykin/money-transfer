/*
 * This file is generated by jOOQ.
 */
package practice.money.transfer.persistence.tables.records


import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import practice.money.transfer.persistence.tables.Account


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountRecord() : UpdatableRecordImpl<AccountRecord>(Account.ACCOUNT), Record3<String?, BigDecimal?, BigDecimal?> {

    open var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var balance: BigDecimal?
        set(value): Unit = set(1, value)
        get(): BigDecimal? = get(1) as BigDecimal?

    open var limit: BigDecimal?
        set(value): Unit = set(2, value)
        get(): BigDecimal? = get(2) as BigDecimal?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, BigDecimal?, BigDecimal?> = super.fieldsRow() as Row3<String?, BigDecimal?, BigDecimal?>
    override fun valuesRow(): Row3<String?, BigDecimal?, BigDecimal?> = super.valuesRow() as Row3<String?, BigDecimal?, BigDecimal?>
    override fun field1(): Field<String?> = Account.ACCOUNT.ID
    override fun field2(): Field<BigDecimal?> = Account.ACCOUNT.BALANCE
    override fun field3(): Field<BigDecimal?> = Account.ACCOUNT.LIMIT
    override fun component1(): String? = id
    override fun component2(): BigDecimal? = balance
    override fun component3(): BigDecimal? = limit
    override fun value1(): String? = id
    override fun value2(): BigDecimal? = balance
    override fun value3(): BigDecimal? = limit

    override fun value1(value: String?): AccountRecord {
        this.id = value
        return this
    }

    override fun value2(value: BigDecimal?): AccountRecord {
        this.balance = value
        return this
    }

    override fun value3(value: BigDecimal?): AccountRecord {
        this.limit = value
        return this
    }

    override fun values(value1: String?, value2: BigDecimal?, value3: BigDecimal?): AccountRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    constructor(id: String? = null, balance: BigDecimal? = null, limit: BigDecimal? = null): this() {
        this.id = id
        this.balance = balance
        this.limit = limit
    }
}
